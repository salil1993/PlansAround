//import liraries
import React, { Component, useState, useEffect } from 'react';
import { View, Text, StyleSheet, StatusBar, FlatList, Image,Modal, TouchableOpacity, ScrollView, Linking, PermissionsAndroid, Alert, SafeAreaView } from 'react-native';
import WrapperContainer from '../../Components/WrapperContainer';
import HeaderBack from '../../Components/HeaderBack';
import { moderateScale, moderateScaleVertical, scale, textScale, height, width } from '../../styles/responsiveSize';
import Loader from '../../Components/Loader';
import { getData } from '../../utils/helperFunctions';
import axios from 'axios';
import { useSelector } from 'react-redux';
import EventhostingComponent from './EventhostingComponent';
import { useFocusEffect } from '@react-navigation/native';
import QRCode from 'react-native-qrcode-svg';
//import Modal from 'react-native-modal'
import imagePath from '../../constants/imagePath';
import ButtonComp from '../../Components/ButtonComp';




// create a component
const EventHosting = ({ navigation }) => {
    const CurrentUserLocation = useSelector((state) => state.persistedReducer.authSlice.userCurrentLocation);
    const [eventData, setEventData] = useState([])
    const [LoadEvent, setLoadEvent] = useState(false)
    const [showQR, setshowQR] = useState(false);
    const [productQRref, setProductQRref] = useState(null);
    const [Loading, setLoading] = useState(false);
    const [QRvalue, setQRvalue] = useState("This QR is Generated By Zip42LAB pvt Ltd.")
    const [showDelete, setDelete] = useState(false);
    const [item, setItem] = useState(null);
    useEffect(() => {
        getCurrentEvents();
    }, [])

    useFocusEffect(
        React.useCallback(() => {
            // Your refresh logic goes here
            console.log('Screen is focused');
            getCurrentEvents();

            // Trigger a re-render of the component
            // For example, by updating state or fetching data again
        }, [])
    );
    const getCurrentEvents = async () => {
        setLoadEvent(true)
        let usertoken = await getData('UserToken');
        console.log(usertoken, 'token')
        const headers = {
            'Authorization': `Bearer ${usertoken}`,
            'Content-Type': 'multipart/form-data',
        };
        axios.get('https://plansaround-backend.vercel.app/api/mobile/my-event/hosting-event', { headers })
            .then((res) => {
                console.log(res, 'total Events')
                setEventData(res.data.events)
                setLoadEvent(false)
            }).
            catch((err) => {
                console.log(err)
                setLoadEvent(false)
            })
    }

    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // Radius of the Earth in km
        const dLat = (lat2 - lat1) * Math.PI / 180;  // Convert degrees to radians
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        const distance = R * c; // Distance in km
        return distance;
    }


    const hasAndroidPermission = async () => {
        const permission = PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE;

        const hasPermission =
            await PermissionsAndroid.check(permission);
        if (hasPermission) {
            return true;
        }

        const status = await PermissionsAndroid.request(permission);
        return status === 'granted';
    }


    const saveQrToDisk = async () => {
        // console.log('saved')

        if (Platform.OS === "android" &&
            (await hasAndroidPermission())) {
            return;
        }

        if (productQRref) {
            productQRref.toDataURL((data) => {
                let filePath = RNFS.CachesDirectoryPath + `/${QRvalue}.png`;
                RNFS.writeFile(filePath, data, 'base64')
                    .then((success) => {
                        return CameraRoll.save(filePath, 'photo')
                    })
                    .then(() => {
                        ToastAndroid.show('QRCode saved to gallery', ToastAndroid.LONG);
                    });
            });
        }
    }




    return (
        <>
            <WrapperContainer>
                <StatusBar barStyle='dark-content' backgroundColor={'#fff'} />
                <HeaderBack mainText='Eventâ€™s Hosting' style={{ backgroundColor: '#fff', paddingHorizontal: moderateScale(10) }} />
                <View style={styles.container}>
                    <View style={{ flex: 1 }}>
                        {
                            LoadEvent ? <Loader /> :
                                <FlatList
                                    ListEmptyComponent={<View style={{ flex: 1, height: height, width: width, justifyContent: 'center', alignItems: 'center', }}><Text style={{ fontSize: scale(15), color: '#4F4F4F', fontWeight: '700' }}>There is no events.</Text></View>}
                                    data={eventData}
                                    renderItem={({ item, index }) => {
                                        console.log(item, 'ye aaya...')
                                        const UserLocation = CurrentUserLocation;
                                        const Eventlocation = item.location;
                                        const Distance = calculateDistance(UserLocation.latitude, UserLocation.longitude, Eventlocation.coordinates[0], Eventlocation.coordinates[1])
                                        const date = item.dateOfEvent.split('T')
                                        return (
                                            <>
                                                <EventhostingComponent 
                                                    item={item}
                                                    index={index}
                                                    UserLocation={UserLocation}
                                                    Distance={Distance}
                                                    date={date}
                                                    Eventlocation={Eventlocation}
                                                    onShowQR ={() =>{ 
                                                        setshowQR(!showQR)
                                                        setItem(item)                           
                                                    }}
                                                    onDeleteItem ={()=>{
                                                         setDelete(!showDelete)
                                                         setItem(item)
                                                    }}
                                                />
                                            </>
                                        )
                                    }
                                    }
                                />
                        }
                    </View>
                </View>
                <View>
                <Modal
                    // coverScreen={false}
                    visible={showQR}
                    transparent={true}
                    // backdropColor="#000"
                    // backdropOpacity={0.8}
                    // animationIn="zoomInDown"
                    // animationOut="zoomOutUp"
                    // animationInTiming={600}
                    // animationOutTiming={600}
                    // backdropTransitionInTiming={600}
                    // backdropTransitionOutTiming={600}
                >
                     <SafeAreaView
          style={{
            flex: 1,
            justifyContent: 'center',
            backgroundColor: `rgba(0,0,0,0.5)`,
          }}>
                    <View style={[styles.modalStyle, { minHeight: moderateScale(height / 1.8), backgroundColor:'#fff', padding:20, margin:20, borderRadius:20}]}>
                        <View style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Text style={styles.qrCode}>Scan the QR code</Text>
                            <TouchableOpacity onPress={() => setshowQR(false)}><Image source={imagePath.Close} tintColor={'#000'} /></TouchableOpacity>
                        </View>
                        <View>
                            <Text style={[styles.qrCode, { color: '#4F4F4F', fontSize: scale(15), fontWeight: '600', lineHeight: scale(20) }]}>Show the QR code shown below to your Organiser to record your attendance to the event.</Text>
                        </View>
                        <View style={{ padding: moderateScale(10), justifyContent: 'center', alignItems: 'center', }}>
                            <QRCode
                                value={QRvalue}
                                size={180}
                                getRef={(c) => setProductQRref(c)}
                            />
                        </View>
                        <View>
                            <ButtonComp midImg={true} midimgPath={imagePath.download2} text='Download' style={{ backgroundColor: '#005BD4' }} onPress={() => saveQrToDisk()} />
                        </View>
                    </View>
                    </SafeAreaView>
                </Modal>
            </View>
            <View>
                <Modal
                    visible={showDelete}
                    transparent={true}
                    // backdropColor="#000"
                    // backdropOpacity={0.5}
                    // animationIn="zoomInDown"
                    // animationOut="zoomOutUp"
                    // animationInTiming={600}
                    // animationOutTiming={600}
                    // backdropTransitionInTiming={600}
                    // backdropTransitionOutTiming={600}
                >
                         <SafeAreaView
          style={{
            flex: 1,
            justifyContent: 'center',
            backgroundColor: `rgba(0,0,0,0.5)`,
          }}>
                    <View style={[styles.modalStyle,  {  backgroundColor:'#fff', padding:20, margin:20, borderRadius:20}]}>
                        <View style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Text style={styles.qrCode}>Delete Event</Text>
                            <TouchableOpacity onPress={() => setDelete(false)}><Image source={imagePath.Close} tintColor={'#000'} /></TouchableOpacity>
                        </View>
                        <View style={{ justifyContent: 'center', alignItems: 'center' }}>
                            <Image source={imagePath.deleteevent} style={{ height: moderateScale(100), width: moderateScale(100) }} />
                        </View>
                        <View>
                            <Text style={[styles.qrCode, { color: '#4F4F4F', fontSize: scale(15), fontWeight: '600', lineHeight: scale(20), textAlign: 'center' }]}>Are you sure you want to delete this event made for <Text style={{ fontWeight: 'bold' }}>{item  && item?.name}</Text> on <Text style={{ fontWeight: 'bold' }}>{item  && item.dateOfEvent.split('T')[0]}</Text> at <Text style={{ fontWeight: 'bold' }}>{item && item?.time?.start}</Text>?</Text>
                        </View>
                        <View style={{ flexDirection: 'row', alignContent: 'center', justifyContent: 'space-between' }}>
                            <View style={{ flex: 3 }}>
                                <ButtonComp text='Cancel' onPress={() => setDelete(false)} style={{ height: moderateScale(45), borderColor: '#005BD4', borderWidth: 1 }} textStyle={{ color: '#005BD4' }} />
                            </View>
                            <View style={{ flex: 3, marginLeft: moderateScale(5) }}>
                                <ButtonComp isLoading={Loading} onPress={() => handleEventDelete(item._id)} text='Continue' style={{ height: moderateScale(45), backgroundColor: '#005BD4' }} />
                            </View>
                        </View>
                    </View>
                    </SafeAreaView>
                </Modal>
            </View>
            </WrapperContainer>
        </>

    );
};

// define your styles
const styles = StyleSheet.create({

    container: {
        flex: 1,
    },
    container2: {
        flex: 1,
        backgroundColor: '#fff',
        marginHorizontal: moderateScale(5),
        paddingHorizontal: moderateScale(12),
        paddingVertical: moderateScale(12),
        elevation: 3,
        marginVertical: moderateScaleVertical(10),
        borderRadius: moderateScale(5),
    },
    eventtxt: {
        color: '#4F4F4F',
        fontSize: scale(14),
        fontWeight: '500'
    },
    charlie: {
        color: '#333',
        fontSize: scale(20),
        fontFamily: 'Roboto',
        fontWeight: '700',
        marginLeft: moderateScale(10)
    },




});

//make this component available to the app
export default EventHosting;
